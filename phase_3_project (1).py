# -*- coding: utf-8 -*-
"""phase 3 project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FcvRimbhKsv7c8d2mZ-UFrW8RIabv71U
"""

üîß 1. model_training.py ‚Äì Train and Save the Model
python
Copy
Edit
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load MNIST data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize and reshape
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)).astype('float32') / 255
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)).astype('float32') / 255

# One-hot encode labels
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Build CNN model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

# Train
model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.1)

# Evaluate
loss, acc = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {acc:.4f}")

# Save model
model.save("digit_model.h5")
üåê 2. app.py ‚Äì Flask API to Serve the Model
python
Copy
Edit
from flask import Flask, request, jsonify
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import io
import logging

app = Flask(__name__)
model = load_model("digit_model.h5")

def preprocess_image(image_bytes):
    img = Image.open(io.BytesIO(image_bytes)).convert('L')
    img = img.resize((28, 28))
    img_array = np.array(img)
    img_array = 255 - img_array  # invert colors if needed
    img_array = img_array / 255.0
    img_array = img_array.reshape(1, 28, 28, 1)
    return img_array

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
    file = request.files['file']
    img_array = preprocess_image(file.read())
    prediction = model.predict(img_array)
    digit = np.argmax(prediction)
    confidence = float(np.max(prediction))

    # Log (simulated logging)
    logging.info(f"Predicted Digit: {digit}, Confidence: {confidence:.2f}")

    return jsonify({'digit': int(digit), 'confidence': confidence})

if __name__ == '__main__':
    app.run(debug=True)
üßæ 3. requirements.txt ‚Äì Python Dependencies
nginx
Copy
Edit
flask
tensorflow
numpy
Pillow
üìÇ Optional: Oracle Logging Stub
python
Copy
Edit
# oracle_logger.py
def log_prediction_to_oracle(user_id, digit, confidence):
    # Stub function - replace with cx_Oracle DB logic
    print(f"[LOG] User {user_id} predicted digit {digit} with confidence {confidence:.2f}")
üß™ 4. Example Test Script
python
Copy
Edit
# test_client.py
import requests

url = "http://127.0.0.1:5000/predict"
files = {'file': open('test_digit.png', 'rb')}
response = requests.post(url, files=files)

print(response.json())